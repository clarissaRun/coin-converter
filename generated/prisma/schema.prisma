generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  firstName          String
  lastName           String
  email              String              @unique
  password           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  favoriteCurrencies FavoriteCurrency[]
  conversions        ConversionHistory[]

  @@map("users")
}

model Currency {
  id                 String              @id @default(cuid())
  name               String
  code               String              @unique
  symbol             String
  type               CurrencyType
  rate               Float               @default(1.0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  favoriteCurrencies FavoriteCurrency[]
  ratesFrom          ExchangeRate[]      @relation("FromCurrency")
  ratesTo            ExchangeRate[]      @relation("ToCurrency")
  conversionsFrom    ConversionHistory[] @relation("ConversionFrom")
  conversionsTo      ConversionHistory[] @relation("ConversionTo")

  @@map("currencies")
}

model FavoriteCurrency {
  id         String   @id @default(cuid())
  userId     String
  currencyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)

  @@unique([userId, currencyId])
  @@map("favorite_currencies")
}

model ExchangeRate {
  id             String   @id @default(cuid())
  fromCurrency   Currency @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  fromCurrencyId String

  toCurrency   Currency @relation("ToCurrency", fields: [toCurrencyId], references: [id])
  toCurrencyId String

  rate      Float
  source    RateSource
  timestamp DateTime   @default(now())

  @@unique([fromCurrencyId, toCurrencyId, source, timestamp])
  @@map("exchange_rates")
}

model ConversionHistory {
  id             String     @id @default(cuid())
  userId         String
  fromCurrencyId String
  toCurrencyId   String
  amount         Float
  result         Float
  rateUsed       Float
  source         RateSource
  createdAt      DateTime   @default(now())

  user         User     @relation(fields: [userId], references: [id])
  fromCurrency Currency @relation("ConversionFrom", fields: [fromCurrencyId], references: [id])
  toCurrency   Currency @relation("ConversionTo", fields: [toCurrencyId], references: [id])

  @@map("conversion_history")
}

enum CurrencyType {
  FIAT
  CRYPTO
}

enum RateSource {
  BCV
  BINANCE
}
